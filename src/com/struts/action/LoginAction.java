/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.struts.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.beans.Pointbase;
import com.beans.User;
import com.dao.PointbaseDao;
import com.dao.UserDao;
import com.struts.form.LoginForm;

/** 
 * MyEclipse Struts
 * Creation date: 06-29-2016
 * 
 * XDoclet definition:
 * @struts.action path="/loginAction" name="loginForm" input="/login.jsp" scope="request" validate="true"
 */
public class LoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LoginForm loginForm = (LoginForm) form;// TODO Auto-generated method stub
		ActionErrors errors=new ActionErrors();
		HttpSession session = request.getSession(); //程序中session的值
		String userName=(String)loginForm.getUserName();
		String password=(String)loginForm.getPassword();
		String userType=(String)loginForm.getUserType();
		
		UserDao UD=new UserDao();//对user实体类进行操作的基本函数
		User u=UD.search(userName);
		if(u==null){
			errors.add("userName",new ActionError("login.userNameError"));
			saveErrors(request,errors);
	        return(new ActionForward(mapping.findForward("fail")));
	        }
		else{
			if(!password.equalsIgnoreCase(u.getPassword())){
				errors.add("password",new ActionError("login.passwordError"));
				saveErrors(request,errors);
				return(new ActionForward(mapping.findForward("fail")));
	        }
			if(!userType.equalsIgnoreCase(u.getUserType())){
				errors.add("userType",new ActionError("login.userTypeError"));
				saveErrors(request,errors);
				return(new ActionForward(mapping.findForward("fail")));
			}
			else{
				//对数据的基本信息进行记录，便于以后进行session的记录
				session.setAttribute("name",userName);
				session.setAttribute("password",password);
				session.setAttribute("userType",userType);
				session.setAttribute("id",u.getId());
				if(userType.equals("1")){
					//跳转成功后将显示所有基本点的基本信息
					request.removeAttribute(mapping.getAttribute());
					PointbaseDao PD=new  PointbaseDao();
					ArrayList<Pointbase> pb=PD.searchAll();
					request.setAttribute("pb",pb);
					return mapping.findForward("psuccess");
				}
				else if(userType.equals("2")){
					request.removeAttribute(mapping.getAttribute());
					return mapping.findForward("isuccess");
				}
				else if(userType.equals("3")){
					request.removeAttribute(mapping.getAttribute());
					return mapping.findForward("asuccess");		
				}
				else{
					return(new ActionForward(mapping.findForward("fail")));	
				}
			}
		}
	}
}